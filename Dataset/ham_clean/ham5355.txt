gary lawrence murphy wrote   r buckminster fuller    after d completed geodesic dome noticed  beautiful    r buckminster fuller cited information theoretic concept  elegance  dissertation  google find reference instead found really great tech report uot knoxville bruce maclennan  cite efficiency  economy  elegance  think s wrong  middle e effectiveness  otherwise kudos  efficiency relation output input effectiveness total output  information theory  something elegant efficient smaller le costly something product output amount time  greg  number  httpaddrhttpaddr  care elegance   role aesthetic programming language design technical report utcsnumbernumber bruce j maclennan computer science department university tennessee  knoxville httpaddr abstract crucial role played aesthetic programming language design importance elegance programming language defended basis analogy structural engineering  presented billington s tower bridge  report may used nonprofit purpose provided source acknowledged  adapted inclusion third edition principle programming language  httpaddr value analogy httpaddr seek minimize resource used httpaddr seek maximize benefit versus cost httpaddr symbolizes good design httpaddr designer httpaddr user httpaddr programming language work environment httpaddr sense elegance httpaddr value analogy programming language design comparatively new activity  existed le half century  often worthwhile look older design discipline understand better new activity  thus  book principle programming language  design  evaluation  implementation  grew study teaching method architecture  primarily  also pedagogy discipline  aircraft design  perhaps also seen analogy drawn programming language car  fortran  model  c  dune buggy  etc   analogy informative  serve  intuition pump  enhance creativity  used uncritically  end  analogy  ultimately design decision must based analogy  since analogy misleading well informative  essay ll address role aesthetic programming language design  base remark book structural engineering  tower bridge  david p billington  although many difference bridge programming language  find many idea insight transfer rather directly  according billington  three value common many technological activity  call  three e s   efficiency  economy elegance  value correspond three dimension technology  billington call scientific  social symbolic dimension  three s   consider turn  efficiency seek minimize resource used structural engineering  efficiency deal amount material used  basic criterion safety issue scientific  strength material  disposition force  etc   similarly  programming language design  efficiency scientific question dealing use resource  many example efficiency consideration influenced programming language design  reviewed principle programming language   early day  resource minimized often runtime memory usage processing time  although compiletime resource utilization also relevant  case resource economized programmer typing time  wellknown case compromised safety  eg  fortran s implicit declaration   also many wellknown case security  ie  safety  sacrificed sake efficiency neglecting runtime error checking  eg  array bound checking   efficiency issue often quantified term computer memory time  must careful comparing apple orange  compile time interchangeable run time  neither one programmer time  similarly  computer memory traded computer time unless reduced common denominator  money  brings economic consideration  turn  economy seek maximize benefit versus cost whereas efficiency scientific issue  economy social issue  structural engineering  economy seek maximize social benefit compared cost   especially appropriate since structure like bridge usually built public expense benefit public   programming language design   public  must satisfied programming community use language institution programmer work  economic tradeoff hard make economic value change difficult predict  example  shift first second generation programming language largely result decrease cost computer time compared programmer time  shift second third generation involved increasing cost residual bug program  fourth generation reflected increasing cost program maintenance compared program development  social factor involved success failure programming language include  whether major manufacturer support language  whether prestigious university teach  whether approved way influential organization  u department defense   whether standardized  whether come perceived  real  language  used  real programmer    toy  language  used novice dilettante   forth  seen historical remark principle  social factor frequently important scientific factor determining success failure programming language  often economic issue quantified term money  monetary value cost benefit often unstable unpredictable depend changing market force  also  many social issue  dissatisfaction poorly designed software human misery resulting system failure  inaccurately represented single dimension monetary cost  kind  cost   benefit  must considered seeking economical design  elegance symbolizes good design  elegance  care elegance   snort hardnosed engineer  billington show clearly critical role elegance  hardnosed  engineering  designer wellknown feature interaction pose serious problem language designer difficulty analyzing possible interaction feature language  see principle example   structural engineer face similar problem analytic complexity  billington observes best designer nt make extensive use computer model calculation  one reason mathematical analysis always incomplete  engineer must make decision variable significant  analysis may lead incorrect conclusion decision made well  also  equation often simplified  eg  made linear  make analysis feasible  another potential source error  limitation  engineer depend mathematical analysis may overdesign structure compensate unforeseen effect left analysis  thus price safety additional material increased cost  ie  decreased efficiency economy   similarly programming language design  limitation analytic approach often force u make choice underengineered design  run risk unanticipated interaction  overengineered design  confidence  inefficient uneconomical  many people seen famous film collapse number fourmonthold tacoma narrow bridge  vibrated piece storm aerodynamical stability considered design  billington explains accident  along number le dramatic bridge failure  consequence increasing use theoretical analysis began number  however  problem destroyed tacoma narrow bridge anticipated avoided century bridge designer guided aesthetic principle  according billington  best structural engineer rely mathematical analysis  although abandon altogether   rather  design activity guided sense elegance  solution structural engineering problem usually greatly underdetermined   many possible solution particular problem  bridging particular river  therefore  expert designer restrict attention design interaction force easy see  design look unbalanced force unbalanced  design look stable stable  general principle design look good also good  therefore design process guided aesthetic without extensive  incomplete  mathematical analysis  billington express idea inverting old architectural maxim asserting  structural design  function follows form  add  p number    form well chosen  analysis becomes astoundingly simple   word  choice form open free  pick form elegant design express good design  ie  efficient economical design    let aesthetic guide design  applies programming language design  restricting attention design interaction feature manifest  good interaction look good  bad interaction look bad  let aesthetic sense guide design much confident good design  without check possible interaction  user case  s good designer also good user  nobody comfortable crossing bridge look like collapse moment  nobody comfortable using programming language feature may  explode  combined wrong way  manifest balance force welldesigned bridge give u confidence cross  also  manifestly good design programming language reinforce confidence program   welljustified  confidence consequence action  accomplish little covering unbalanced structure beautiful facade  bridge unable sustain load designed  collapse  wo nt much matter beautiful outside  also programming language  elegance superficial   manifestation deep coherence design  programmer quickly see illusion loose  unwarranted  confidence  summary  good designer choose work region design space good design look good  consequence  designer rely aesthetic sense  user structure  bridge programming language  design  may miss good design way  limited value unless designer user confident good design  may summarize preceding discussion maxim analogous principle programming language  elegance principle confine attention design look good good  programming language work environment reason elegance relevant wellengineered programming language  programming language something professional programmer live  even live  feel comfortable safe  like welldesigned home office  way contribute quality activity take place within  would work better oriental garden sweatshop  programming language joy use  encourage use decrease programmer s fatigue frustration  programming language hindrance  serve collaborator  encouraging programmer job better  automobile  driving machine  work natural extension driver  programming language  programming machine  encouraging programmer acquire smooth competence seemingly effortless skill virtuoso  programming language invite programmer design elegant  efficient economical program  aesthetic dimension programming language symbolizes many value  example  variety feature may symbolize profligate excess  sparing economy asceticism  kind feature may represent intellectual sophistication  downtoearth practicality ignorant crudeness  thus programming language promote set value  embodying certain value  encourages u think  neglecting negating value  allows recede background attention  sight  mind  acquiring sense elegance aesthetic notoriously difficult teach  may wonder supposed acquire refined sense elegance necessary good design  billington observes sense acquired extensive experience design   especially europe  encouraged competitive process choosing bridge designer   structural engineer design many bridge build  learn competition loose comparing design winner loser  public also critique competing design  way becomes educated  sense elegance develops along designer  also  improve programming language designer design many language  design obsessively  criticize  revise discard design  also evaluate criticize people s design try improve  way acquire body experience need  real thing  come along  reference httpaddr  david p  tower bridge  new art structural engineering  princeton  princeton university press  number  chapter number number relevant  httpaddr  bruce j  principle programming language  design  evaluation  implementation  second edition  new york  holt  rinehart  winston  oxford university press   number 
