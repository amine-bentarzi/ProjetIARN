core java technology technical tip code  color   number  fontfamily  verdana  courier  monospace  fontsize  numberpt  pre  color   number  fontfamily  verdana  courier  monospace  fontsize  numberpt  body  div  span  color   number  fontfamily  arial  helvetica  sansserif  fontsize  numberpt  td  th  color   number  fontfamily  arial  helvetica  sansserif  fontsize  numberpt  tr  color   number  fontfamily  arial  helvetica  sansserif  fontsize  numberpt  table  fontfamily  arial  helvetica  sansserif  fontsize  numberpt  p  color   number  fontfamily  arial  helvetica  sansserif  fontsize  numberpt  li  color   number  fontfamily  arial  helvetica  sansserif  fontsize  numberpt  br  color   number  fontfamily  arial  helvetica  sansserif  fontsize  numberpt  div  color   number  fontfamily  arial  helvetica  sansserif  fontsize  numberpt  sup  fontfamily  arial  helvetica  sansserif  fontsize  numberpt  hnumber  color   number  fontfamily  arial  helvetica  sansserif  fontsize  numberpt  hnumber  hnumber  hnumber  color   number  fontfamily  arial  helvetica  sansserif  fontsize  numberpt  blockquote  input  select  color   number  fontfamily  arial  helvetica  sansserif  fontsize  numberpt  ul  ol  font  color   number  fontfamily  arial  helvetica  sansserif  fontsize  numberpt   link  fontsize  numberpt  fontfamily  arial  helvetica  sansserif  color   number  httpaddr  fontweight  bold  color   number  fontfamily  arial  helvetica  sansserif  fontsize  numberpt  httpaddr  fontsize  numberpt  fontfamily  arial  helvetica  sansserif  color   number  httpaddr  fontsize  numberpt  fontfamily  arial  helvetica  sansserif  color   number  view issue simple text september number  number issue welcome core javatm technology tech tip  september number  number  ll get tip using core java technology apis  java number platform  standard edition  jnumbersetm   using arraylist linkedlist using zerolength array tip developed using java number sdk  standard edition  v numbernumber  issue jdc tech tip written glen mccluskey  using arraylist linkedlist arraylist linkedlist two collection class used storing list object reference  example  could arraylist string  linkedlist integer  tip compare performance arraylist linkedlist  offer suggestion class right choice given situation  first key point arraylist backed primitive object array   arraylist much faster linkedlist random access   accessing arbitrary list element using get method  note get method implemented linkedlists  requires sequential scan front back list  scan slow  linkedlist  s fast way access nth element list  consider following example  suppose large list sorted element  either arraylist linkedlist  suppose binary search list  standard binary search algorithm start checking search key value middle list  middle value high  upper half list eliminated  however  middle value low  lower half list ignored  process continues key found list  lower bound search becomes greater upper bound  s program binary search element arraylist linkedlist  import httpaddr   public class listdemonumber  static final int n  number  static list value   make list increasing integer value static  integer vals    new integer  n   random rn  new random     int  number  currval  number  n  i   vals    new integer  currval   currval  httpaddr  number   number   value  httpaddr  vals     iterate across list look every  value list using binary search static long timelist  list lst   long start  httpaddr     int  number  n  i    look value list  using binary search int indx  httpaddr  lst  httpaddr      sanity check result  binary search  indx     httpaddr     error    n     return httpaddr    start   public static void main  string args      lookup arraylist httpaddr  time arraylist   timelist  new arraylist  value      lookup linkedlist httpaddr  time linkedlist   timelist  new linkedlist  value       listdemonumber program set list sorted integer value  add value arraylist linkedlist  httpaddr used search value list  run program  see result look something like  time arraylist  number time linkedlist  number arraylist number time faster linkedlist   result might differ depending machine characteristic  see distinct difference result arraylist compared linkedlist  true program tip   clearly  linkedlist bad choice situation  binary search algorithm inherently us random access  linkedlist support fast random access  time random access linkedlist proportional size list  comparison  random access arraylist fixed time  use randomaccess marker interface check whether list support fast random access  void f  list lst    lst instanceof randomaccess    support fast random access   arraylist implement randomaccess interface  linkedlist   note httpaddr take advantage randomaccess property  optimize search  result prove arraylist always better choice  necessarily  many case linkedlist better  also note many situation algorithm implemented efficiently linkedlist  example reversing linkedlist using httpaddr internal algorithm  get reasonable performance  using forward backward iterators  let s look another example  suppose list element  lot element inserting deleting list  case  linkedlist better choice  demonstrate  consider following worst case scenario  demo  program repeatedly insert element beginning list  code look like  import httpaddr   public class listdemonumber  static final int n  number   time long take add  n object list static long timelist  list lst   long start  httpaddr    object obj  new object     int  number  n  i   httpaddr  number  obj    return httpaddr    start   public static void main  string args      timing arraylist httpaddr  time arraylist   timelist  new arraylist       timing linkedlist httpaddr  time linkedlist   timelist  new linkedlist        run program  result look something like  time arraylist  number time linkedlist  number result pretty much reverse previous example  element added beginning arraylist  existing element must pushed back  mean lot expensive data movement copying  contrast  adding element beginning linkedlist simply mean allocating internal record element adjusting couple link  adding beginning linkedlist fixed cost  adding beginning arraylist cost s proportional list size  far  tip looked speed issue  space  let s look internal detail arraylist linkedlist implemented java number sdk  standard edition v numbernumber  detail part external specification class  illustrative class work internally  linkedlist class private internal class defined like  private static class entry  object element  entry next  entry previous   entry object reference list element  along next previous element linkedlist  word  doublylinked list  linkedlist number element number entry object linked together  referencing actual list element  significant space overhead linkedlist structure  given entry object  arraylist backing object array store element  array start capacity number  array need grow  new capacity computed  newcapacity   oldcapacity  number   number  number  notice array capacity grows time number   mean arraylist large number element  significant amount space wasted end  waste intrinsic way arraylist work  spare capacity  array would reallocated new element  performance would suffer dramatically  changing growth strategy aggressive  doubling size reallocation  would result slightly better performance  would waste space  know many element arraylist  specify capacity constructor  also call trimtosize method fact reallocate internal array  get rid wasted space  far  discussion assumed either arraylist linkedlist right given application  sometimes  choice make sense  example  consider common situation list keyvalue pair  would like retrieve value given key  could store pair n x number object array  find right pair  could sequential search key value  approach work  useful choice small list  say number element le   nt scale big list  another approach sort keyvalue pair ascending key value  store result pair arraylists  binary search key list  approach also work  fast  yet another approach use list structure  instead use map structure  hash table   form hashmap  faster  binary search arraylist  hashmap  s final example compare two  import httpaddr   public class listdemonumber  static final int n  number   list key value static list key  static list value   fill key list ascending order key  value fill value list  corresponding value  key  static  integer keyvec    new integer  n   integer valuevec    new integer  n   random rn  new random     int  number  currval  number  n  i   keyvec    new integer  currval   valuevec    new integer  currval   currval  httpaddr  number   number   key  httpaddr  keyvec   value  httpaddr  valuevec     fill map keyvalue pair static map map  new hashmap    static   int  number  n  i   httpaddr  httpaddr    httpaddr        binary search lookup key static long timelist    long start  httpaddr     int  number  n  i   int indx  httpaddr  key  httpaddr      sanity check returned value  binary search  indx     httpaddr     error    n     return httpaddr    start    map lookup key static long timemap    long start  httpaddr     int  number  n  i   integer value   integer  httpaddr  httpaddr      sanity check value returned  map lookup  value   httpaddr     httpaddr     error    n     return httpaddr    start   public static void main  string args      timing list implementation httpaddr   list time    timelist      timing map implementation httpaddr  map time   timemap       program set list key value  us two different technique map key value  one approach us binary search list  hash table  run listdemonumber program  get result look something like  arraylist time  number hashmap time  number example  n value number  approximately  lognumber  n   number comparison required average successful binary search  binary search lookup arraylist take number comparison  contrast  properly implemented hash table typically requires numbernumber comparison  expect hash table faster case  however  binary search still useful  example  might want lookup sorted list find key close value key used lookup  easy binary search  impossible hash table  key hash table stored apparent random order  also  concerned worstcase performance  binary search algorithm offer much stronger performance guarantee hash table scheme  might also consider using treemap lookup sorted collection keyvalue pair  let s summarize key point presented tip  appending element end list fixed averaged cost arraylist linkedlist  arraylist  appending typically involves setting internal array location element reference  occasionally result array reallocated  linkedlist  cost uniform involves allocating internal entry object  inserting deleting element middle arraylist implies rest list must moved  inserting deleting element middle linkedlist fixed cost  linkedlist support efficient random access arraylist space overhead form reserve capacity end list  linkedlist significant space overhead per element  sometimes map structure better choice list  information using arraylist linkedlists  see section numbernumber  list  section numbernumber  map sortedmap  javatm programming language third edition arnold  gosling  holmes  also see collection trail java tutorial  third edition  back top using zerolength array suppose writing java application involves sort data filtering  raw data want clean process various way  one method ve written take array integer  along minimum maximum value  method go array eliminates outlier   value small big  result filtering process new array cleanedup data  could implement kind filtering method  s one approach  import httpaddr   public class zerodemonumber   filter input array throw away value  le minval greater  maxval static int   filterdata  int indata    int minval  int maxval    check parameter error  indata  null   throw new nullpointerexception  indata null     maxval minval   throw new illegalargumentexception  maxval minval     count number valid value  input array int validcnt  number   int  number  httpaddr  i    indata    minval indata    maxval   validcnt     valid value  return null  validcnt  number   return null    copy valid value new array  return int outdata    new int  validcnt    int  number  j  number  httpaddr  i    indata    minval indata    maxval   outdata  j   indata      return outdata   public static void main  string args      set test array integer int indata    new int    number  number  number  number  number    filter value range numbernumber int outdatanumber    filterdata  indata  number  number    int  number  httpaddr  i   httpaddr  outdatanumber       filter value  range numbernumber int outdatanumber    filterdata  indata  number  number    int  number  httpaddr  i   httpaddr  outdatanumber        filterdata method two scan input array  first scan count number valid data value  method allocates new array appropriate size  copy good value  good value  method return null value array reference  result running zerodemonumber program  number number number exception thread main httpaddr httpaddr  httpaddr  problem program rather basic one  second call filterdata return null value  program fails take possibility account  better approach example would comment block code test possibility valid data value     validcnt  number   return null     valid data  code fall next line  zerolength array allocated  int outdata    new int  number   perfectly legal java usage  representation java array includes length array  s therefore possible tell array zero length  zerodemonumber example  anticipate validcnt often zero   data filtering often eliminate value input  could optimize away second input scan adding code like  int outdata    new int  validcnt    validcnt  number   return outdata   note usage  int outdata    new int      also legal  initialize array zerolength set integer constant  general  s best return null method return array type  always returning array  even array zero length  greatly improves generality algorithm  anticipate method often return zerolength array  might concerned performance implication allocating many array  case  allocate single array  always return one  follows  private static final int zerolengtharray    new int  number   array immutable  ca nt changed   shared throughout application  s another way zerolength array used  illustrated following example  import httpaddr   public class zerodemonumber  public static void main  string args      set arraylist add string list stringlist  new arraylist    httpaddr  string number   httpaddr  string number   httpaddr  string number    convert string array string     string    httpaddr  new string  number     int  number  httpaddr  i   httpaddr         result running zerodemonumber program  string number string number string number zerodemonumber program set arraylist  add three string  program call toarray get string array three element arraylist  example  argument toarray new string  number   argument serf couple purpose  first  string array s big enough hold element arraylist  specify argument toarray  method use string array  array big enough  toarray method allocates array return element  us type array passed determine type allocated array  arraylist store element reference object array  toarray method need told type  string  used returning array element  method us reflection  httpaddr  create array appropriate type  information using zerolength array  see item number return zerolength array  null effective java programming language guide joshua bloch  back top important  please read term use  privacy  licensing policy  httpaddr httpaddr httpaddr comment  send feedback javatm technology fundamental newsletter  httpaddr subscribe following newsletter latest information technology product java platform   enterprise java technology tech tip  get tip using enterprise java technology apis  java number platform  enterprise edition  jnumbereetm    wireless developer tech tip  get tip using wireless java technology apis  java number platform  micro edition  jnumbermetm   subscribe jdc publication   go jdc newsletter publication page  choose newsletter want subscribe click update   unsubscribe  go subscription page  uncheck appropriate checkbox  click update  archive  ll find core java technology tech tip archive  httpaddr copyright number sun microsystems  inc right reserved  number san antonio road  palo alto  california number usa  sun  sun microsystems  java  java developer connection  jnumberse  jnumberee  jnumberme trademark registered trademark sun microsystems  inc united state country  please send newsletter httpaddr unsubscribe newsletter 
